#ifndef TargetCircleWidget_h
#define TargetCircleWidget_h


#include <QFrame>
#include <QIcon>
#include <QWidget>
namespace htl_qt_widgets
{

//##################################################################################################
class  TargetCircleWidget : public QWidget
{
  Q_OBJECT
  //Q_PROPERTY(QString colorSeries          READ colorSeries           WRITE setColorSeries          RESET unsetColorSeries)
public:
  //################################################################################################
  TargetCircleWidget(QWidget *parent=NULL);

  //################################################################################################
  ~TargetCircleWidget();

  //################################################################################################
  virtual QSize sizeHint()const;

  //################################################################################################
  virtual int heightForWidth(int width)const;

  //################################################################################################
  void setText(const QString& text);

  //################################################################################################
  QString text()const;

  //################################################################################################
  void setUnits(const QString& units);

  //################################################################################################
  QString units()const;

  //################################################################################################
  void setValue(int value);

  //################################################################################################
  int value()const;

  //################################################################################################
  void setLimits(int lowerLimit, int upperLimit);

protected:
  //################################################################################################
  virtual void paintEvent(QPaintEvent* event);

  //################################################################################################
  virtual void resizeEvent(QResizeEvent* event);

    //################################################################################################
    virtual void mousePressEvent(QMouseEvent* event);

    //################################################################################################
    virtual void mouseMoveEvent(QMouseEvent* event);

    //################################################################################################
    virtual void mouseReleaseEvent(QMouseEvent* event);

  //################################################################################################
  virtual void timerEvent(QTimerEvent* event);

signals:
  //################################################################################################
  void targetChanged();

private:
  struct Private;
  Private* d;
  friend struct Private;
};

}

#endif
